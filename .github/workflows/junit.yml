name: Measure coverage

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build and run tests with JaCoCo
        env:
          APPLICATION_TEST_PROPERTIES: "ordering-system-microservice-payment\src\main\resources\application-test.properties"
        run: |
          mvn clean verify -Dspring.profiles.active=test -Dspring.config.location=$APPLICATION_TEST_PROPERTIES

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco

      - name: Check coverage thresholds
        run: |
              # Extrair o número de linhas cobertas e não cobertas do relatório JaCoCo
            COVERAGE=$(sed -n 's/.*<counter type="LINE" covered="\([0-9]*\)".*missed="\([0-9]*\)".*/\1/p' target/site/jacoco/jacoco.xml)
            TOTAL_LINES=$(sed -n 's/.*<counter type="LINE" covered="\([0-9]*\)".*missed="\([0-9]*\)".*/\2/p' target/site/jacoco/jacoco.xml)
            
            # Verificar se COVERAGE e TOTAL_LINES são números válidos
            if [[ ! $COVERAGE =~ ^[0-9]+$ || ! $TOTAL_LINES =~ ^[0-9]+$ ]]; then
          echo "Error: Failed to parse coverage numbers from JaCoCo report."
            exit 1
            fi
            
            # Calcular a porcentagem de cobertura
            COVERAGE_PERCENT=$(( $COVERAGE * 100 / ($COVERAGE + $TOTAL_LINES) ))
            
            # Definir o limiar de cobertura desejado (80% neste exemplo)
            THRESHOLD=80
            
            # Comparar a cobertura percentual com o limiar
            if (( $COVERAGE_PERCENT < $THRESHOLD )); then
          echo "Error: coverage is below the threshold ($THRESHOLD%)"
            exit 1
            else
            echo "Coverage is satisfactory"
            fi
