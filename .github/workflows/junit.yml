name: Measure coverage

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Set up environment variables
        run: |
          echo "Setting up environment variables..."
          echo "export AWS_REGION=testApplication" >> $GITHUB_ENV
          echo "export AWS_ACCESS_KEY_ID=testApplication" >> $GITHUB_ENV
          echo "export AWS_SECRET_ACCESS_KEY=testApplication" >> $GITHUB_ENV
          echo "export DYNAMODB_ENDPOINT=testApplication" >> $GITHUB_ENV
          echo "export SQS_NAME=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_API_ORDER=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_ACCESS_TOKEN=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_MERCHANT_ID=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_MERCHANT_ORDER_ID=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_PAYMENT_ENDPOINT=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_QR_CODE_ENDPOINT=testApplication" >> $GITHUB_ENV
          echo "export MERCADO_PAGO_NOTIFICATION_URL=testApplication" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Build and run tests with JaCoCo
        run: |
          mvn clean verify

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco

      - name: Check coverage thresholds
        run: |
          COVERAGE=$(sed -n 's/.*<counter.*type="LINE".*covered="\([0-9]*\)".*missed="\([0-9]*\)".*/\1/gp' target/site/jacoco/jacoco.xml)
          TOTAL_LINES=$(sed -n 's/.*<counter.*type="LINE".*covered="\([0-9]*\)".*missed="\([0-9]*\)".*/\2/gp' target/site/jacoco/jacoco.xml)
          COVERAGE_PERCENT=$(echo "scale=2; $COVERAGE * 100 / ($COVERAGE + $TOTAL_LINES)" | bc -l)
          THRESHOLD=80

          if (( $(echo "$COVERAGE_PERCENT < $THRESHOLD" | bc -l) )); then
            echo "Error: Coverage is below the threshold ($THRESHOLD%)"
            exit 1
          else
            echo "Coverage is satisfactory"
          fi
